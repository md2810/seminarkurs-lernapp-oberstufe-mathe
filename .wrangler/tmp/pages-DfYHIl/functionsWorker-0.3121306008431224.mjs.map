{
  "version": 3,
  "sources": ["../bundle-oOSkqZ/checked-fetch.js", "../../../data/bw_oberstufe_themen.json", "../../../functions/api/analyze-image.js", "../../../functions/api/auth.js", "../../../functions/api/evaluate-answer.js", "../../../functions/api/generate-custom-hint.js", "../../../data/prompts/generate-questions.js", "../../../functions/api/generate-questions.js", "../../../functions/api/get-models.js", "../../../functions/api/update-auto-mode.js", "functionsRoutes-0.44282725691341396.mjs", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-oOSkqZ/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-oOSkqZ/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\marco\\dev\\Seminarkurs\\seminarkurs-lernapp-oberstufe-mathe\\.wrangler\\tmp\\pages-DfYHIl\\functionsWorker-0.3121306008431224.mjs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "{\r\n  \"Klassen_11_12\": {\r\n    \"Leistungsfach\": {\r\n      \"3.4.1 Leitidee Zahl \u2013 Variable \u2013 Operation\": {\r\n        \"Zahlenwerte approximieren\": [\r\n          \"die eulersche Zahl e n\u00E4herungsweise bestimmen\"\r\n        ],\r\n        \"weitere Ableitungsregeln anwenden\": [\r\n          \"ein iteratives Verfahren zur n\u00E4herungsweisen Bestimmung von Nullstellen begr\u00FCnden und durchf\u00FChren\",\r\n          \"die Produkt- und Kettenregel zum Ableiten von Funktionen verwenden\",\r\n          \"gebrochenrationale Funktionen durch Verbindung der Ableitungsregeln in einfachen F\u00E4llen ableiten (z.\u202FB. f(x)=2/(3x^2\u22124), nicht jedoch f(x)=x/(3x^2\u22124))\"\r\n        ],\r\n        \"Integrationsregeln verwenden und Integrale berechnen\": [\r\n          \"die Potenzregel, die Regel f\u00FCr konstanten Faktor, die Summenregel sowie das Verfahren der linearen Substitution f\u00FCr die Bestimmung einer Stammfunktion verwenden\",\r\n          \"Stammfunktionsterme zu den Funktionstermen sin(x), cos(x), e^x, 1/x angeben\",\r\n          \"den Hauptsatz der Differential- und Integralrechnung zur Berechnung von bestimmten Integralen nutzen\",\r\n          \"uneigentliche Integrale untersuchen\"\r\n        ],\r\n        \"Produkte von Vektoren bilden\": [\r\n          \"das Skalarprodukt berechnen, geometrisch interpretieren und bei Berechnungen nutzen\",\r\n          \"das Vektorprodukt berechnen, geometrisch interpretieren und bei Berechnungen nutzen\"\r\n        ],\r\n        \"Gau\u00DF-Algorithmus verwenden\": [\r\n          \"das Gau\u00DFverfahren zum L\u00F6sen eines linearen Gleichungssystems als ein Beispiel f\u00FCr ein algorithmisches Verfahren erl\u00E4utern\",\r\n          \"das Gau\u00DFverfahren, auch in Matrixschreibweise, zum L\u00F6sen eines linearen Gleichungssystems durchf\u00FChren\",\r\n          \"die L\u00F6sungsmenge eines linearen 3\u00D73\u2011Gleichungssystems geometrisch interpretieren\"\r\n        ]\r\n      },\r\n      \"3.4.2 Leitidee Messen\": {\r\n        \"Winkelweiten, Abst\u00E4nde und Fl\u00E4cheninhalte in kartesischen Koordinatensystemen berechnen\": [\r\n          \"die Orthogonalit\u00E4t zweier Vektoren mithilfe des Skalarprodukts \u00FCberpr\u00FCfen\",\r\n          \"Winkelweiten mithilfe des Skalarprodukts bestimmen\",\r\n          \"Schnittwinkel zwischen geometrischen Objekten (Geraden und Ebenen) bestimmen\",\r\n          \"die Hesse\u2019sche Normalenform einer Ebenengleichung zur Berechnung des Abstands eines Punktes zu einer Ebene anwenden\",\r\n          \"Abst\u00E4nde zwischen den geometrischen Objekten Punkt, Gerade und Ebene (auch zwischen windschiefen Geraden) ermitteln\",\r\n          \"das Vektorprodukt zum Ermitteln von Fl\u00E4cheninhalten anwenden\"\r\n        ],\r\n        \"das Integral nutzen\": [\r\n          \"das bestimmte Integral als Grenzwert einer Summe erl\u00E4utern und geometrisch deuten\",\r\n          \"den Mittelwert einer Funktion auf einem Intervall berechnen\",\r\n          \"Fl\u00E4cheninhalte zwischen Graph und x\u2011Achse und zwischen zwei Graphen bestimmen\",\r\n          \"das Volumen von K\u00F6rpern berechnen, die durch Rotation von Fl\u00E4chen um die x\u2011Achse entstehen\"\r\n        ]\r\n      },\r\n      \"3.4.3 Leitidee Raum und Form\": {\r\n        \"Produkte von Vektoren geometrisch nutzen\": [\r\n          \"das Skalarprodukt und das Vektorprodukt geometrisch deuten\",\r\n          \"einen gemeinsamen orthogonalen Vektor zu zwei Vektoren bestimmen\"\r\n        ],\r\n        \"vektorielle Darstellungen zur Beschreibung des Anschauungsraumes verwenden\": [\r\n          \"Ebenen mithilfe von Spurpunkten und Spurgeraden im Schr\u00E4gbild eines Koordinatensystems veranschaulichen\",\r\n          \"Ebenen mithilfe einer Parameterdarstellung, einer Koordinatengleichung und einer Normalengleichung analytisch beschreiben\",\r\n          \"eine Parameterdarstellung einer Ebene in eine Normalengleichung und in eine Koordinatengleichung umrechnen\",\r\n          \"zwischen Gerade\u2013Ebene und Ebene\u2013Ebene die Lagebeziehung untersuchen sowie gegebenenfalls die Schnittgebilde rechnerisch bestimmen\",\r\n          \"Problemstellungen, wie z.\u202FB. Spiegelung eines Punktes an einer Ebene, Spiegelung einer Geraden an einen Punkt, Abstands\u2011, Fl\u00E4cheninhalts\u2011 und Volumenberechnungen sowie Untersuchungen geradliniger Bewegungen, im Raum bearbeiten\"\r\n        ],\r\n        \"vektorielle Darstellungen beim Beweisen nutzen\": [\r\n          \"einfache mathematische Aussagen und S\u00E4tze beweisen (z.\u202FB. \u201EIn einem Trapez ist die Mittellinie parallel zu den Grundseiten\u201C, \u201EDie Seitenmitten eines r\u00E4umlichen Vierecks bilden die Eckpunkte eines Parallelogramms\u201C, \u201EIn einer Raute sind die Diagonalen zueinander orthogonal\u201C, Satz des Thales)\"\r\n        ]\r\n      },\r\n      \"3.4.4 Leitidee Funktionaler Zusammenhang\": {\r\n        \"mit der nat\u00FCrlichen Exponential\u2011 und Logarithmusfunktion umgehen\": [\r\n          \"die besondere Bedeutung der Basis e bei Exponentialfunktionen erl\u00E4utern\",\r\n          \"die Graphen der nat\u00FCrlichen Exponential\u2011 und Logarithmusfunktion unter Verwendung charakteristischer Eigenschaften skizzieren und die Beziehung zwischen den Graphen beschreiben, auch unter dem Aspekt der Umkehrfunktion\",\r\n          \"charakteristische Eigenschaften der Funktion f mit f(x)=e^x beschreiben\",\r\n          \"die Ableitungsfunktion und eine Stammfunktion der Funktion f mit f(x)=e^x angeben\",\r\n          \"die Ableitungsfunktion der Funktion f mit f(x)=ln(x) angeben\"\r\n        ],\r\n        \"mit Umkehrfunktionen arbeiten\": [\r\n          \"Definitionsmengen und Wertemengen von Funktionen bestimmen und den Zusammenhang zwischen der Wertemenge einer Funktion und der Definitionsmenge ihrer Umkehrfunktion erl\u00E4utern\",\r\n          \"die strenge Monotonie einer Funktion verwenden, um ihre Umkehrbarkeit nachzuweisen, und die Nichtumkehrbarkeit einer Funktion anhand ihrer charakteristischen Eigenschaften begr\u00FCnden\",\r\n          \"zu einer gegebenen umkehrbaren Funktion den Term ihrer Umkehrfunktion bestimmen\"\r\n        ],\r\n        \"mit zusammengesetzten Funktionen umgehen\": [\r\n          \"Funktionen verketten und Verkettungen von Funktionen erkennen\",\r\n          \"die Graphen von Funktionen in einfachen F\u00E4llen auf waagrechte und senkrechte Asymptoten und Nullstellen untersuchen, deren Funktionsterm als Quotient zuvor behandelter Funktionstypen gebildet werden kann\",\r\n          \"Graphen von zusammengesetzten Funktionen (Summe, Produkt, Verkettung) untersuchen\"\r\n        ],\r\n        \"Differentialrechnung anwenden\": [\r\n          \"Extremwertprobleme mit Nebenbedingungen l\u00F6sen\",\r\n          \"einen Funktionsterm zu gegebenen Eigenschaften eines Graphen ermitteln\",\r\n          \"bei Funktionsscharen einzelne Fragestellungen zu Eigenschaften ihrer Graphen oder zu Zusammenh\u00E4ngen zwischen den Graphen untersuchen\"\r\n        ],\r\n        \"die Grundidee der Integralrechnung verstehen und mit Integralen umgehen\": [\r\n          \"den Wert des bestimmten Integrals als orientierten Fl\u00E4cheninhalt und als Bestandsver\u00E4nderung erkl\u00E4ren\",\r\n          \"Funktionen aus ihren \u00C4nderungsraten rekonstruieren\",\r\n          \"den Bestand aus Anfangsbestand und \u00C4nderungsraten bestimmen\",\r\n          \"den Inhalt des Hauptsatzes der Differential\u2011 und Integralrechnung angeben\",\r\n          \"die Begriffe Integralfunktion und Stammfunktion gegeneinander abgrenzen\",\r\n          \"vom Graphen der Funktion auf den Graphen einer Stammfunktion schlie\u00DFen und umgekehrt\",\r\n          \"den Hauptsatz der Differential\u2011 und Integralrechnung in Begr\u00FCndungszusammenh\u00E4ngen (z.\u202FB. zum Nachweis der Linearit\u00E4t des Integrals) nutzen\",\r\n          \"die Linearit\u00E4t des Integrals anschaulich begr\u00FCnden und rechen\u00F6konomisch nutzen\"\r\n        ]\r\n      },\r\n      \"3.4.5 Leitidee Daten und Zufall\": {\r\n        \"Hypothesen bei binomialverteilten Zufallsgr\u00F6\u00DFen testen\": [\r\n          \"das Argumentationsmuster erl\u00E4utern, das dem Testen von Hypothesen zugrunde liegt\",\r\n          \"eine Nullhypothese so formulieren, dass sie der Zielsetzung des Tests entspricht\",\r\n          \"Ablehnungsbereich und Irrtumswahrscheinlichkeit an einem Histogramm erl\u00E4utern\",\r\n          \"ein\u2011 und zweiseitige Hypothesentests durchf\u00FChren und den Ablehnungsbereich, die Entscheidungsregel und die Irrtumswahrscheinlichkeit angeben\",\r\n          \"Signifikanzniveau und Irrtumswahrscheinlichkeit gegeneinander abgrenzen\",\r\n          \"Fehler erster und zweiter Art im Kontext eines Hypothesentests erl\u00E4utern\",\r\n          \"den Einfluss des Stichprobenumfangs auf die Wahrscheinlichkeiten f\u00FCr den Fehler erster Art (das Risiko erster Art) und f\u00FCr den Fehler zweiter Art (das Risiko zweiter Art) angeben\"\r\n        ],\r\n        \"mit Normalverteilungen umgehen\": [\r\n          \"den Unterschied zwischen diskreten und stetigen Zufallsgr\u00F6\u00DFen erl\u00E4utern, insbesondere am Beispiel binomial\u2011 und normalverteilter Zufallsgr\u00F6\u00DFen\",\r\n          \"die Dichtefunktion einer normalverteilten Zufallsgr\u00F6\u00DFe mithilfe von Erwartungswert und Standardabweichung angeben und die zugeh\u00F6rige Glockenkurve skizzieren\",\r\n          \"stochastische Situationen untersuchen, die zu ann\u00E4hernd normalverteilten Zufallsgr\u00F6\u00DFen geh\u00F6ren, und Wahrscheinlichkeiten berechnen\"\r\n        ]\r\n      }\r\n    },\r\n    \"Basisfach\": {\r\n      \"3.5.1 Leitidee Zahl \u2013 Variable \u2013 Operation\": {\r\n        \"den nat\u00FCrlichen Logarithmus nutzen\": [\r\n          \"den nat\u00FCrlichen Logarithmus einer Zahl als L\u00F6sung einer Exponentialgleichung verwenden\"\r\n        ],\r\n        \"weitere Ableitungsregeln anwenden\": [\r\n          \"die Produktregel zum Ableiten von Funktionstermen verwenden\",\r\n          \"die Kettenregel zum Ableiten von Funktionstermen verwenden, bei denen die innere Funktion eine lineare Funktion ist\"\r\n        ],\r\n        \"Integrationsregeln verwenden und Integrale berechnen\": [\r\n          \"die Potenzregel, die Regel f\u00FCr konstanten Faktor, die Summenregel sowie das Verfahren der linearen Substitution f\u00FCr die Bestimmung einer Stammfunktion verwenden\",\r\n          \"Stammfunktionsterme zu den Funktionstermen sin(x), cos(x), e^x, 1/x angeben\",\r\n          \"den Hauptsatz der Differential\u2011 und Integralrechnung zur Berechnung von bestimmten Integralen nutzen\"\r\n        ],\r\n        \"Produkte von Vektoren bilden\": [\r\n          \"das Skalarprodukt berechnen und bei Berechnungen nutzen\",\r\n          \"das Vektorprodukt berechnen und bei Berechnungen nutzen\"\r\n        ],\r\n        \"lineare Gleichungssysteme untersuchen\": [\r\n          \"das Gau\u00DFverfahren, auch in Matrixschreibweise, auf lineare Gleichungssysteme ohne Parameter bis zur Stufenform anwenden\",\r\n          \"die L\u00F6sungsvielfalt linearer Gleichungssysteme ohne Parameter angeben und im Falle eindeutiger L\u00F6sbarkeit deren L\u00F6sung bestimmen\"\r\n        ]\r\n      },\r\n      \"3.5.2 Leitidee Messen\": {\r\n        \"Winkelweiten, Abst\u00E4nde und Fl\u00E4cheninhalte in kartesischen Koordinatensystemen berechnen\": [\r\n          \"die Orthogonalit\u00E4t zweier Vektoren mithilfe des Skalarprodukts \u00FCberpr\u00FCfen\",\r\n          \"Winkelweiten mithilfe des Skalarprodukts bestimmen\",\r\n          \"Schnittwinkel zwischen geometrischen Objekten (Geraden und Ebenen) bestimmen\",\r\n          \"den Abstand zwischen den geometrischen Objekten Punkt und Ebene ermitteln\",\r\n          \"das Vektorprodukt zum Ermitteln von Fl\u00E4cheninhalten anwenden\"\r\n        ],\r\n        \"das Integral nutzen\": [\r\n          \"das bestimmte Integral mithilfe eines Grenzprozesses anschaulich beschreiben und geometrisch deuten\",\r\n          \"Fl\u00E4cheninhalte zwischen Graph und x\u2011Achse und zwischen zwei Graphen bestimmen\"\r\n        ]\r\n      },\r\n      \"3.5.3 Leitidee Raum und Form\": {\r\n        \"Produkte von Vektoren geometrisch nutzen\": [\r\n          \"das Skalarprodukt und das Vektorprodukt geometrisch deuten\",\r\n          \"einen gemeinsamen orthogonalen Vektor zu zwei Vektoren bestimmen\"\r\n        ],\r\n        \"vektorielle Darstellungen zur Beschreibung des Anschauungsraumes verwenden\": [\r\n          \"Ebenen mithilfe von Spurpunkten und Spurgeraden im Schr\u00E4gbild eines Koordinatensystems veranschaulichen\",\r\n          \"Ebenen mithilfe einer Parameterdarstellung und einer Koordinatengleichung analytisch beschreiben\",\r\n          \"eine Parameterdarstellung einer Ebene in eine Koordinatengleichung umrechnen\",\r\n          \"die Lagebeziehung zwischen einer Geraden und einer Ebene untersuchen und gegebenenfalls deren Schnittpunkt rechnerisch bestimmen\",\r\n          \"die Lagebeziehung zwischen zwei Ebenen erkennen und begr\u00FCnden\",\r\n          \"Problemstellungen, wie z.\u202FB. Spiegelung eines Punktes an einer Ebene, Fl\u00E4cheninhalts\u2011 und Volumenberechnungen bearbeiten, sowie geradlinige Bewegungen untersuchen\"\r\n        ]\r\n      },\r\n      \"3.5.4 Leitidee Funktionaler Zusammenhang\": {\r\n        \"mit der nat\u00FCrlichen Exponentialfunktion umgehen\": [\r\n          \"die besondere Bedeutung der Basis e bei Exponentialfunktionen beschreiben\",\r\n          \"charakteristische Eigenschaften der Funktion f mit f(x)=e^x beschreiben und deren Graph mit dessen waagrechter Asymptote skizzieren\",\r\n          \"die Ableitungsfunktion und eine Stammfunktion der Funktion f mit f(x)=e^x angeben\"\r\n        ],\r\n        \"mit zusammengesetzten Funktionen umgehen\": [\r\n          \"Verkettungen von Funktionen erkennen, falls die innere Funktion eine lineare Funktion ist\",\r\n          \"Graphen von zusammengesetzten Funktionen (Summe, Produkt, Verkettung mit linearer innerer Funktion) untersuchen\"\r\n        ],\r\n        \"Differentialrechnung anwenden\": [\r\n          \"Extremwerte auch in au\u00DFermathematischen Sachzusammenh\u00E4ngen bestimmen\",\r\n          \"einen Funktionsterm ermitteln, falls dieser durch die Eigenschaften eines Graphen eindeutig festgelegt ist\"\r\n        ],\r\n        \"die Grundidee der Integralrechnung verstehen und mit Integralen umgehen\": [\r\n          \"den Wert des bestimmten Integrals als orientierten Fl\u00E4cheninhalt und als Bestandsver\u00E4nderung deuten\",\r\n          \"Funktionen aus ihren \u00C4nderungsraten rekonstruieren\",\r\n          \"den Bestand aus Anfangsbestand und \u00C4nderungsraten bestimmen\",\r\n          \"den Hauptsatz der Differential\u2011 und Integralrechnung anwenden\",\r\n          \"vom Graphen der Funktion auf den Graphen einer Stammfunktion schlie\u00DFen und umgekehrt\",\r\n          \"die Linearit\u00E4t des Integrals anschaulich begr\u00FCnden und rechen\u00F6konomisch nutzen\"\r\n        ]\r\n      },\r\n      \"3.5.5 Leitidee Daten und Zufall\": {\r\n        \"mit Normalverteilungen umgehen\": [\r\n          \"den Unterschied zwischen diskreten und stetigen Zufallsgr\u00F6\u00DFen am Beispiel binomial\u2011 und normalverteilter Zufallsgr\u00F6\u00DFen beschreiben\",\r\n          \"den Zusammenhang der Kenngr\u00F6\u00DFen Erwartungswert und Standardabweichung einer Normalverteilung und der zugeh\u00F6rigen Glockenkurve beschreiben\",\r\n          \"stochastische Situationen untersuchen, die zu ann\u00E4hernd normalverteilten Zufallsgr\u00F6\u00DFen geh\u00F6ren, und Wahrscheinlichkeiten berechnen\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}", "// Cloudflare Pages Function: Image Analysis for Topic Extraction\r\n// Analyzes uploaded images of topic lists using Claude 4.5 Sonnet\r\n\r\nimport curriculumData from '../../data/bw_oberstufe_themen.json'\r\n\r\nexport async function onRequestPost(context) {\r\n  try {\r\n    const body = await context.request.json()\r\n    const { apiKey, image, gradeLevel, courseType } = body\r\n\r\n    // Validate required fields\r\n    if (!apiKey || !image || !gradeLevel || !courseType) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Missing required fields: apiKey, image, gradeLevel, courseType'\r\n        }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Get curriculum for context\r\n    const curriculum = curriculumData.Klassen_11_12[courseType]\r\n    if (!curriculum) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid courseType'\r\n        }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Build prompt for Claude\r\n    const prompt = `Du bist ein Experte f\u00FCr den Baden-W\u00FCrttemberg Bildungsplan Mathematik Oberstufe.\r\n\r\nDer Nutzer hat ein Bild einer Themenliste hochgeladen (z.B. f\u00FCr eine Klausur).\r\n\r\nDEINE AUFGABE:\r\n1. Analysiere das Bild und extrahiere alle sichtbaren mathematischen Themen\r\n2. Mappe die Themen auf den offiziellen BW-Bildungsplan\r\n3. Gib die Themen im strukturierten Format zur\u00FCck\r\n\r\nKONTEXT:\r\n- Klassenstufe: ${gradeLevel}\r\n- Kurstyp: ${courseType}\r\n\r\nBILDUNGSPLAN:\r\n${JSON.stringify(curriculum, null, 2)}\r\n\r\nWICHTIG:\r\n- Extrahiere nur Themen, die im Bild klar lesbar sind\r\n- Mappe sie auf die exakten Bezeichnungen aus dem Bildungsplan\r\n- Gib eine Confidence an (0-1), wie sicher du bei der Zuordnung bist\r\n- Wenn ein Thema nicht genau passt, gib Vorschl\u00E4ge\r\n\r\nGib deine Antwort als JSON zur\u00FCck (NUR das JSON, keine weiteren Erkl\u00E4rungen):\r\n{\r\n  \"extractedTopics\": [\r\n    {\r\n      \"leitidee\": \"3.4.1 Leitidee Zahl \u2013 Variable \u2013 Operation\",\r\n      \"thema\": \"weitere Ableitungsregeln anwenden\",\r\n      \"unterthema\": \"die Produkt- und Kettenregel zum Ableiten von Funktionen verwenden\",\r\n      \"confidence\": 0.95\r\n    }\r\n  ],\r\n  \"suggestions\": [\"Falls Themen nicht klar zugeordnet werden konnten\"]\r\n}`\r\n\r\n    // Call Claude API\r\n    const anthropicResponse = await fetch('https://api.anthropic.com/v1/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'claude-sonnet-4-20250514',\r\n        max_tokens: 4096,\r\n        messages: [\r\n          {\r\n            role: 'user',\r\n            content: [\r\n              {\r\n                type: 'image',\r\n                source: {\r\n                  type: 'base64',\r\n                  media_type: 'image/jpeg',\r\n                  data: image\r\n                }\r\n              },\r\n              {\r\n                type: 'text',\r\n                text: prompt\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      })\r\n    })\r\n\r\n    if (!anthropicResponse.ok) {\r\n      const error = await anthropicResponse.json()\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Anthropic API error',\r\n          details: error\r\n        }),\r\n        { status: anthropicResponse.status, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    const anthropicData = await anthropicResponse.json()\r\n    const responseText = anthropicData.content[0].text\r\n\r\n    // Parse JSON response\r\n    let extractedData\r\n    try {\r\n      // Try to extract JSON from response (in case Claude adds extra text)\r\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/)\r\n      if (jsonMatch) {\r\n        extractedData = JSON.parse(jsonMatch[0])\r\n      } else {\r\n        extractedData = JSON.parse(responseText)\r\n      }\r\n    } catch (parseError) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Failed to parse Claude response',\r\n          rawResponse: responseText\r\n        }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Check if topics match curriculum\r\n    const matchedTopics = extractedData.extractedTopics.filter(topic => {\r\n      const leitideeExists = curriculum[topic.leitidee]\r\n      if (!leitideeExists) return false\r\n      const themaExists = leitideeExists[topic.thema]\r\n      if (!themaExists) return false\r\n      return themaExists.includes(topic.unterthema)\r\n    })\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        extractedTopics: matchedTopics,\r\n        matchedFromCurriculum: matchedTopics.length > 0,\r\n        suggestions: extractedData.suggestions || [],\r\n        totalFound: extractedData.extractedTopics.length,\r\n        totalMatched: matchedTopics.length\r\n      }),\r\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('Error in analyze-image:', error)\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Server error',\r\n        message: error.message\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function onRequestGet(context) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      endpoint: '/api/analyze-image',\r\n      method: 'POST',\r\n      description: 'Analyzes uploaded images of topic lists using Claude Vision',\r\n      requiredFields: ['apiKey', 'image (base64)', 'gradeLevel', 'courseType']\r\n    }),\r\n    { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n  )\r\n}\r\n", "// Cloudflare Pages Function for Authentication\r\n// This is a simple demo auth system - in production, use proper authentication!\r\n\r\nexport async function onRequestPost(context) {\r\n  try {\r\n    const body = await context.request.json();\r\n    const { username, password } = body;\r\n\r\n    // Simple hardcoded auth for demo purposes\r\n    // In production: use proper authentication with hashing, JWT, etc.\r\n    if (username === 'admin' && password === 'admin') {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: true,\r\n          user: {\r\n            username: 'admin',\r\n            level: 7,\r\n            xp: 1250,\r\n            streak: 12\r\n          },\r\n          message: 'Login erfolgreich!'\r\n        }),\r\n        {\r\n          status: 200,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            // In production: set secure session cookies or JWT tokens\r\n            'Set-Cookie': 'auth_session=demo_session; HttpOnly; Secure; SameSite=Strict; Max-Age=86400'\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        message: 'Ung\u00FCltiger Benutzername oder Passwort'\r\n      }),\r\n      {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        message: 'Server-Fehler'\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function onRequestGet(context) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      message: 'Auth endpoint - use POST to login'\r\n    }),\r\n    {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }\r\n  );\r\n}\r\n", "// Cloudflare Pages Function: Answer Evaluation\r\n// Evaluates user answers and calculates XP\r\n\r\nexport async function onRequestPost(context) {\r\n  try {\r\n    const body = await context.request.json()\r\n    const { apiKey, userId, questionId, questionData, userAnswer, hintsUsed, timeSpent, skipped } = body\r\n\r\n    // Validate required fields\r\n    if (!questionData || userAnswer === undefined) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Missing required fields'\r\n        }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    let isCorrect = false\r\n    let correctAnswer = null\r\n    let feedback = ''\r\n\r\n    // Evaluate based on question type\r\n    if (questionData.type === 'multiple-choice') {\r\n      correctAnswer = questionData.options.find(opt => opt.isCorrect)?.id\r\n      isCorrect = userAnswer === correctAnswer\r\n\r\n      if (isCorrect) {\r\n        feedback = `Richtig! ${questionData.explanation}`\r\n      } else {\r\n        const userOption = questionData.options.find(opt => opt.id === userAnswer)\r\n        feedback = `Leider falsch. Du hast ${userOption?.text || 'keine Antwort'} gew\u00E4hlt. Die richtige Antwort ist ${correctAnswer}. ${questionData.explanation}`\r\n      }\r\n\r\n    } else if (questionData.type === 'step-by-step') {\r\n      // Evaluate each step\r\n      const stepResults = questionData.steps.map((step, index) => {\r\n        const userStepAnswer = userAnswer[index]\r\n        const expected = parseFloat(step.expectedAnswer)\r\n        const actual = parseFloat(userStepAnswer)\r\n        const tolerance = step.tolerance || 0.01\r\n\r\n        const stepCorrect = Math.abs(expected - actual) <= tolerance\r\n\r\n        return {\r\n          stepNumber: step.stepNumber,\r\n          correct: stepCorrect,\r\n          expected: step.expectedAnswer,\r\n          actual: userStepAnswer\r\n        }\r\n      })\r\n\r\n      isCorrect = stepResults.every(r => r.correct)\r\n      correctAnswer = questionData.steps.map(s => s.expectedAnswer)\r\n\r\n      if (isCorrect) {\r\n        feedback = `Alle Schritte korrekt! ${questionData.explanation}`\r\n      } else {\r\n        const wrongSteps = stepResults.filter(r => !r.correct).map(r => r.stepNumber)\r\n        feedback = `Nicht alle Schritte waren korrekt. Fehler in Schritt(en): ${wrongSteps.join(', ')}. ${questionData.explanation}`\r\n      }\r\n    }\r\n\r\n    // Calculate XP\r\n    const BASE_XP = {\r\n      1: 10, 2: 15, 3: 20, 4: 30, 5: 50\r\n    }\r\n\r\n    let baseXp = BASE_XP[questionData.difficulty] || 20\r\n\r\n    // If skipped\r\n    if (skipped) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: true,\r\n          isCorrect: false,\r\n          feedback: 'Frage \u00FCbersprungen',\r\n          correctAnswer,\r\n          xpEarned: 0,\r\n          xpBreakdown: {\r\n            base: baseXp,\r\n            hintPenalty: -baseXp,\r\n            timePenalty: 0,\r\n            bonuses: 0,\r\n            total: 0\r\n          }\r\n        }),\r\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // If wrong, no XP\r\n    if (!isCorrect) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: true,\r\n          isCorrect: false,\r\n          feedback,\r\n          correctAnswer,\r\n          xpEarned: 0,\r\n          xpBreakdown: {\r\n            base: baseXp,\r\n            hintPenalty: 0,\r\n            timePenalty: 0,\r\n            bonuses: 0,\r\n            total: 0\r\n          }\r\n        }),\r\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Calculate XP for correct answer\r\n    const HINT_PENALTY_MULTIPLIER = {\r\n      0: 1.0,   // 100%\r\n      1: 0.85,  // 85%\r\n      2: 0.65,  // 65%\r\n      3: 0.40   // 40%\r\n    }\r\n\r\n    let xp = baseXp\r\n    const hintMultiplier = HINT_PENALTY_MULTIPLIER[Math.min(hintsUsed || 0, 3)]\r\n    const hintPenalty = baseXp * (1 - hintMultiplier)\r\n    xp *= hintMultiplier\r\n\r\n    // Time bonus (if very fast - expected time ~60s per difficulty level)\r\n    let timeBonus = 0\r\n    const expectedTime = questionData.difficulty * 60\r\n    if (timeSpent && timeSpent < expectedTime * 0.5) {\r\n      timeBonus = baseXp * 0.2 // +20% bonus\r\n      xp += timeBonus\r\n    }\r\n\r\n    const totalXp = Math.round(xp)\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        isCorrect: true,\r\n        feedback,\r\n        correctAnswer,\r\n        xpEarned: totalXp,\r\n        xpBreakdown: {\r\n          base: baseXp,\r\n          hintPenalty: -Math.round(hintPenalty),\r\n          timePenalty: 0,\r\n          bonuses: Math.round(timeBonus),\r\n          total: totalXp\r\n        }\r\n      }),\r\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('Error in evaluate-answer:', error)\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Server error',\r\n        message: error.message\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function onRequestGet(context) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      endpoint: '/api/evaluate-answer',\r\n      method: 'POST',\r\n      description: 'Evaluates user answer and calculates XP',\r\n      requiredFields: ['questionData', 'userAnswer', 'hintsUsed', 'timeSpent']\r\n    }),\r\n    { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n  )\r\n}\r\n", "// Cloudflare Pages Function: Custom Hint Generation\r\n// Generates personalized hint based on user's specific question\r\n\r\nexport async function onRequestPost(context) {\r\n  try {\r\n    const body = await context.request.json()\r\n    const { apiKey, userId, questionData, userQuestion, previousHints, userContext } = body\r\n\r\n    // Validate required fields\r\n    if (!apiKey || !questionData || !userQuestion) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Missing required fields'\r\n        }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Build previous hints context\r\n    const hintsUsedText = previousHints && previousHints.length > 0\r\n      ? previousHints.map((h, i) => `Hinweis ${i + 1}: ${h}`).join('\\n')\r\n      : 'Keine Hinweise bisher verwendet'\r\n\r\n    const prompt = `Du bist ein geduldiger und hilfreicher Mathematik-Tutor.\r\n\r\nDer Sch\u00FCler bearbeitet folgende Aufgabe:\r\n\r\nAUFGABE:\r\n${questionData.question}\r\n\r\n${questionData.type === 'multiple-choice' ? `ANTWORTM\u00D6GLICHKEITEN:\r\n${questionData.options.map(opt => `${opt.id}) ${opt.text}`).join('\\n')}` : ''}\r\n\r\n${questionData.type === 'step-by-step' ? `SCHRITTE:\r\n${questionData.steps.map(s => `Schritt ${s.stepNumber}: ${s.instruction}`).join('\\n')}` : ''}\r\n\r\nBISHERIGE HINWEISE (bereits verwendet):\r\n${hintsUsedText}\r\n\r\nDER SCH\u00DCLER FRAGT JETZT:\r\n\"${userQuestion}\"\r\n\r\nDEINE AUFGABE:\r\nGib einen hilfreichen, personalisierten Hinweis, der:\r\n1. Direkt auf die Frage des Sch\u00FClers eingeht\r\n2. Verst\u00E4ndlich und ermutigend ist\r\n3. NICHT die komplette L\u00F6sung verr\u00E4t\r\n4. Den Sch\u00FCler zum eigenst\u00E4ndigen Denken anregt\r\n5. Maximal 3-4 S\u00E4tze lang ist\r\n\r\nWICHTIG:\r\n- Sei geduldig und ermutigend\r\n- Nutze einfache Sprache\r\n- Vermeide es, die L\u00F6sung direkt zu nennen\r\n- Gib konkrete Denkanst\u00F6\u00DFe\r\n\r\nAntworte NUR mit dem Hinweis-Text (keine zus\u00E4tzlichen Erkl\u00E4rungen oder Formatierungen):`\r\n\r\n    // Call Claude API\r\n    const anthropicResponse = await fetch('https://api.anthropic.com/v1/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'claude-sonnet-4-20250514',\r\n        max_tokens: 500,\r\n        temperature: 0.8,\r\n        messages: [\r\n          {\r\n            role: 'user',\r\n            content: prompt\r\n          }\r\n        ]\r\n      })\r\n    })\r\n\r\n    if (!anthropicResponse.ok) {\r\n      const error = await anthropicResponse.json()\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Anthropic API error',\r\n          details: error\r\n        }),\r\n        { status: anthropicResponse.status, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    const anthropicData = await anthropicResponse.json()\r\n    const customHint = anthropicData.content[0].text.trim()\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        customHint\r\n      }),\r\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('Error in generate-custom-hint:', error)\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Server error',\r\n        message: error.message\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function onRequestGet(context) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      endpoint: '/api/generate-custom-hint',\r\n      method: 'POST',\r\n      description: 'Generates personalized hint based on user question',\r\n      requiredFields: ['apiKey', 'questionData', 'userQuestion', 'previousHints']\r\n    }),\r\n    { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n  )\r\n}\r\n", "// System prompt template for generating math questions\r\n// Exported as a JavaScript module for Cloudflare Pages Functions compatibility\r\n\r\nexport default {\r\n  version: \"1.0\",\r\n  description: \"System prompt for generating math questions for Baden-W\u00FCrttemberg Oberstufe\",\r\n  prompt: `Du bist ein erfahrener Mathematiklehrer f\u00FCr die Oberstufe in Baden-W\u00FCrttemberg.\r\n\r\nAUFGABE:\r\nGeneriere 20 hochwertige \u00DCbungsaufgaben basierend auf folgenden Themen:\r\n\r\nTHEMEN:\r\n{{TOPICS_LIST}}\r\n\r\nNUTZERKONTEXT:\r\n- Klassenstufe: {{GRADE_LEVEL}}\r\n- Kurstyp: {{COURSE_TYPE}}\r\n{{STRUGGLING_TOPICS}}\r\n{{MEMORIES}}\r\n\r\n{{AUTO_MODE}}\r\n\r\nWICHTIGE ANFORDERUNGEN:\r\n\r\n1. FRAGETYPEN (Mix):\r\n   - 70% Multiple-Choice (4 Antwortoptionen, genau 1 korrekt)\r\n   - 30% Step-by-Step (2-4 Schritte, numerische oder algebraische Antworten)\r\n\r\n2. SCHWIERIGKEITSVERTEILUNG:\r\n   - 20% Schwierigkeit 1-2 (AFB I: Reproduktion, einfache Anwendung)\r\n   - 50% Schwierigkeit 3 (AFB II: Zusammenh\u00E4nge herstellen, Standardverfahren anwenden)\r\n   - 30% Schwierigkeit 4-5 (AFB III: Transfer, komplexe Probleml\u00F6sung)\r\n\r\n3. HINWEISE (f\u00FCr jede Frage 3 Stufen):\r\n   - Hint 1: Sanfter Denkansto\u00DF, weist auf relevantes Konzept hin (keine L\u00F6sung!)\r\n   - Hint 2: Konkreter Tipp zur Methode/Formel, aber keine vollst\u00E4ndige Rechnung\r\n   - Hint 3: Detaillierter L\u00F6sungsweg, aber Sch\u00FCler muss selbst die finalen Schritte ausf\u00FChren\r\n\r\n4. GEOGEBRA (wenn geometrisch/visuell sinnvoll):\r\n   - Bei Analysis: Funktionsgraphen, Ableitungen, Integrale\r\n   - Bei Geometrie: Vektoren, Ebenen, Geraden\r\n   - Gib konkrete GeoGebra-Befehle an\r\n   - Beispiele: [\"f(x) = x^2 + 2*x - 3\", \"Derivative(f)\", \"Integral(f, -2, 3)\"]\r\n   - Bei Vektoren: [\"A = (1, 2, 3)\", \"B = (4, 5, 6)\", \"Vector(A, B)\"]\r\n\r\n5. PERSONALISIERUNG:\r\n   - Passe Schwierigkeit an bisherige Performance an\r\n   - Bei Schwierigkeiten: Mehr Unterst\u00FCtzung in Hints, einfachere Startfragen\r\n   - Bei guter Performance: Herausfordernde AFB III Fragen\r\n   - Nutze AUTO-Modus Einsch\u00E4tzung f\u00FCr Detailgrad der Erkl\u00E4rungen\r\n\r\n6. QUALIT\u00C4TSSTANDARDS:\r\n   - Mathematisch korrekt und pr\u00E4zise\r\n   - Klare, verst\u00E4ndliche Formulierung\r\n   - Realit\u00E4tsnahe Kontexte wo m\u00F6glich\r\n   - Vielf\u00E4ltige Aufgabenstellungen (nicht repetitiv)\r\n   - LaTeX f\u00FCr mathematische Notation: z.B. $f(x) = x^2$, $\\\\frac{1}{2}$, $\\\\int_0^1 x dx$\r\n\r\nGib deine Antwort als JSON zur\u00FCck (NUR das JSON, keine weiteren Erkl\u00E4rungen):\r\n\r\n{\r\n  \"questions\": [\r\n    {\r\n      \"id\": \"q1\",\r\n      \"type\": \"multiple-choice\",\r\n      \"topic\": \"Analysis\",\r\n      \"subtopic\": \"Ableitungen\",\r\n      \"difficulty\": 2,\r\n      \"question\": \"Bestimme die Ableitung von $f(x) = 3x^2 + 2x - 5$.\",\r\n      \"options\": [\r\n        {\"id\": \"A\", \"text\": \"$f'(x) = 6x + 2$\", \"isCorrect\": true},\r\n        {\"id\": \"B\", \"text\": \"$f'(x) = 6x - 5$\", \"isCorrect\": false},\r\n        {\"id\": \"C\", \"text\": \"$f'(x) = 3x + 2$\", \"isCorrect\": false},\r\n        {\"id\": \"D\", \"text\": \"$f'(x) = 6x^2 + 2$\", \"isCorrect\": false}\r\n      ],\r\n      \"hints\": [\r\n        {\"level\": 1, \"text\": \"Denke an die Potenzregel: $(x^n)' = n \\\\cdot x^{n-1}$\"},\r\n        {\"level\": 2, \"text\": \"Leite jeden Term einzeln ab: $(3x^2)' = 6x$, $(2x)' = 2$, Konstanten fallen weg\"},\r\n        {\"level\": 3, \"text\": \"L\u00F6sung: $f'(x) = 3 \\\\cdot 2x + 2 = 6x + 2$\"}\r\n      ],\r\n      \"solution\": \"A\",\r\n      \"explanation\": \"Mit der Potenzregel erhalten wir: $f'(x) = 3 \\\\cdot 2x^{2-1} + 2 \\\\cdot 1x^{1-1} - 0 = 6x + 2$\",\r\n      \"geogebra\": {\r\n        \"appletId\": null,\r\n        \"commands\": [\"f(x) = 3*x^2 + 2*x - 5\", \"f'(x)\"]\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"q2\",\r\n      \"type\": \"step-by-step\",\r\n      \"topic\": \"Analysis\",\r\n      \"subtopic\": \"Kurvendiskussion\",\r\n      \"difficulty\": 4,\r\n      \"question\": \"Gegeben ist die Funktion $f(x) = x^3 - 3x^2 + 2$. F\u00FChre eine vollst\u00E4ndige Kurvendiskussion durch.\",\r\n      \"steps\": [\r\n        {\r\n          \"stepNumber\": 1,\r\n          \"instruction\": \"Bestimme die Nullstellen von $f(x)$. Gib die kleinste Nullstelle an (auf 2 Dezimalstellen gerundet).\",\r\n          \"expectedAnswer\": \"-0.73\",\r\n          \"tolerance\": 0.02\r\n        },\r\n        {\r\n          \"stepNumber\": 2,\r\n          \"instruction\": \"Bestimme die x-Koordinate des lokalen Maximums.\",\r\n          \"expectedAnswer\": \"0\",\r\n          \"tolerance\": 0.01\r\n        },\r\n        {\r\n          \"stepNumber\": 3,\r\n          \"instruction\": \"Bestimme die x-Koordinate des lokalen Minimums.\",\r\n          \"expectedAnswer\": \"2\",\r\n          \"tolerance\": 0.01\r\n        }\r\n      ],\r\n      \"hints\": [\r\n        {\"level\": 1, \"text\": \"F\u00FCr Extremstellen: Setze $f'(x) = 0$ und l\u00F6se nach x auf\"},\r\n        {\"level\": 2, \"text\": \"Bilde die Ableitungen: $f'(x) = 3x^2 - 6x$ und $f''(x) = 6x - 6$. Extremstellen bei $x = 0$ und $x = 2$\"},\r\n        {\"level\": 3, \"text\": \"Mit $f''(0) = -6 < 0$ ist $x=0$ ein Maximum. Mit $f''(2) = 6 > 0$ ist $x=2$ ein Minimum. Nullstellen numerisch oder mit Polynomdivision finden.\"}\r\n      ],\r\n      \"solution\": \"Nullstellen: $x_1 \\\\approx -0.73$, $x_2 = 1$, $x_3 \\\\approx 2.73$; Maximum bei $(0, 2)$; Minimum bei $(2, -2)$\",\r\n      \"explanation\": \"Durch Ableitung und Nullstellensuche der Ableitung finden wir die Extremstellen. Die zweite Ableitung entscheidet \u00FCber Art der Extremstelle.\",\r\n      \"geogebra\": {\r\n        \"appletId\": null,\r\n        \"commands\": [\"f(x) = x^3 - 3*x^2 + 2\", \"Derivative(f)\", \"Extremum(f)\"]\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nWICHTIG: Generiere GENAU 20 Fragen mit dieser Struktur!`,\r\n  placeholders: {\r\n    TOPICS_LIST: \"List of topics from learning plan\",\r\n    GRADE_LEVEL: \"User's grade level (Klasse_11 or Klasse_12)\",\r\n    COURSE_TYPE: \"Course type (Leistungsfach or Basisfach)\",\r\n    STRUGGLING_TOPICS: \"Topics user is struggling with\",\r\n    MEMORIES: \"AI memories about the user\",\r\n    AUTO_MODE: \"AUTO mode assessment context\"\r\n  }\r\n}\r\n", "// Cloudflare Pages Function: Question Generation\r\n// Generates 20 questions per topic with hints, solutions, and GeoGebra commands\r\n\r\nimport curriculumData from '../../data/bw_oberstufe_themen.json'\r\nimport promptTemplate from '../../data/prompts/generate-questions.js'\r\n\r\nexport async function onRequestPost(context) {\r\n  try {\r\n    const body = await context.request.json()\r\n    const { apiKey, userId, learningPlanItemId, topics, userContext, selectedModel } = body\r\n\r\n    // Validate required fields\r\n    if (!apiKey || !userId || !topics || !userContext) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Missing required fields'\r\n        }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Use selected model or default to claude-sonnet-4-5\r\n    const model = selectedModel || 'claude-sonnet-4-5-20250929'\r\n\r\n    // Get curriculum context\r\n    const curriculum = curriculumData.Klassen_11_12[userContext.courseType]\r\n\r\n    // Build context about struggling topics\r\n    const strugglingTopicsText = userContext.recentPerformance?.strugglingTopics?.length > 0\r\n      ? `Der Sch\u00FCler hat Schwierigkeiten mit: ${userContext.recentPerformance.strugglingTopics.join(', ')}`\r\n      : 'Keine bekannten Schwierigkeiten'\r\n\r\n    // Build AUTO mode context\r\n    const autoModeText = userContext.autoModeAssessment\r\n      ? `AUTO-Modus Einsch\u00E4tzung:\r\n- Detailgrad: ${userContext.autoModeAssessment.currentAssessment.detailLevel}% (${userContext.autoModeAssessment.currentAssessment.detailLevel > 60 ? 'ausf\u00FChrliche' : 'kurze'} Erkl\u00E4rungen)\r\n- Temperatur: ${userContext.autoModeAssessment.currentAssessment.temperature} (${userContext.autoModeAssessment.currentAssessment.temperature > 0.6 ? 'kreativ' : 'pr\u00E4zise'})\r\n- Hilfestellung: ${userContext.autoModeAssessment.currentAssessment.helpfulness}% (${userContext.autoModeAssessment.currentAssessment.helpfulness > 60 ? 'unterst\u00FCtzend' : 'eigenst\u00E4ndig'})\r\n\r\nInterne Begr\u00FCndung: \"${userContext.autoModeAssessment.currentAssessment.reasoning}\"`\r\n      : 'AUTO-Modus nicht aktiv - nutze ausgewogene Einstellungen'\r\n\r\n    // Build topics list\r\n    const topicsList = topics.map(t => `- ${t.leitidee} > ${t.thema} > ${t.unterthema}`).join('\\n')\r\n\r\n    // Build AI memories context\r\n    const memoriesText = userContext.recentMemories?.length > 0\r\n      ? `Bekannte Informationen \u00FCber den Sch\u00FCler:\\n${userContext.recentMemories.join('\\n')}`\r\n      : 'Keine spezifischen Informationen \u00FCber Lernverhalten bekannt'\r\n\r\n    // Build prompt from template with placeholders\r\n    const prompt = promptTemplate.prompt\r\n      .replace('{{TOPICS_LIST}}', topicsList)\r\n      .replace('{{GRADE_LEVEL}}', userContext.gradeLevel)\r\n      .replace('{{COURSE_TYPE}}', userContext.courseType)\r\n      .replace('{{STRUGGLING_TOPICS}}', strugglingTopicsText)\r\n      .replace('{{MEMORIES}}', memoriesText)\r\n      .replace('{{AUTO_MODE}}', autoModeText)\r\n\r\n    // Call Claude API\r\n    const anthropicResponse = await fetch('https://api.anthropic.com/v1/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        max_tokens: 16000,\r\n        temperature: 0.7,\r\n        messages: [\r\n          {\r\n            role: 'user',\r\n            content: prompt\r\n          }\r\n        ]\r\n      })\r\n    })\r\n\r\n    if (!anthropicResponse.ok) {\r\n      const error = await anthropicResponse.json()\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Anthropic API error',\r\n          details: error\r\n        }),\r\n        { status: anthropicResponse.status, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    const anthropicData = await anthropicResponse.json()\r\n    const responseText = anthropicData.content[0].text\r\n\r\n    // Parse JSON response\r\n    let questionsData\r\n    try {\r\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/)\r\n      if (jsonMatch) {\r\n        questionsData = JSON.parse(jsonMatch[0])\r\n      } else {\r\n        questionsData = JSON.parse(responseText)\r\n      }\r\n    } catch (parseError) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Failed to parse Claude response',\r\n          rawResponse: responseText.substring(0, 1000)\r\n        }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Generate session ID\r\n    const sessionId = `session_${Date.now()}_${userId.substring(0, 8)}`\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        sessionId,\r\n        learningPlanItemId,\r\n        topics,\r\n        userContext,\r\n        questions: questionsData.questions,\r\n        totalQuestions: questionsData.questions.length\r\n      }),\r\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('Error in generate-questions:', error)\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Server error',\r\n        message: error.message\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function onRequestGet(context) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      endpoint: '/api/generate-questions',\r\n      method: 'POST',\r\n      description: 'Generates 20 questions with hints and solutions',\r\n      requiredFields: ['apiKey', 'userId', 'topics', 'userContext']\r\n    }),\r\n    { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n  )\r\n}\r\n", "// Cloudflare Pages Function: Get Available Models\r\n// Fetches available Claude models from Anthropic API\r\n\r\nexport async function onRequestPost(context) {\r\n  try {\r\n    const body = await context.request.json()\r\n    const { apiKey } = body\r\n\r\n    // Validate API key\r\n    if (!apiKey) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'API key is required'\r\n        }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Call Anthropic API to get available models\r\n    const anthropicResponse = await fetch('https://api.anthropic.com/v1/models', {\r\n      method: 'GET',\r\n      headers: {\r\n        'x-api-key': apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      }\r\n    })\r\n\r\n    if (!anthropicResponse.ok) {\r\n      const error = await anthropicResponse.json()\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Failed to fetch models from Anthropic API',\r\n          details: error\r\n        }),\r\n        { status: anthropicResponse.status, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    const modelsData = await anthropicResponse.json()\r\n\r\n    // Filter and format models for the UI\r\n    const models = modelsData.data\r\n      .filter(model => {\r\n        // Only show models that are suitable for chat/completion\r\n        return model.id.includes('claude') && !model.id.includes('opus-4')\r\n      })\r\n      .map(model => ({\r\n        id: model.id,\r\n        name: formatModelName(model.id),\r\n        type: getModelType(model.id),\r\n        description: getModelDescription(model.id),\r\n        created: model.created_at\r\n      }))\r\n      .sort((a, b) => b.created - a.created) // Sort by newest first\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        models\r\n      }),\r\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('Error in get-models:', error)\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Server error',\r\n        message: error.message\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n  }\r\n}\r\n\r\n// Helper function to format model names\r\nfunction formatModelName(modelId) {\r\n  // Extract version from model ID\r\n  // e.g., \"claude-sonnet-4-5-20250929\" -> \"Claude Sonnet 4.5\"\r\n  // e.g., \"claude-opus-4-20250514\" -> \"Claude Opus 4\"\r\n\r\n  if (modelId.includes('sonnet')) {\r\n    const match = modelId.match(/claude-sonnet-(\\d+)-(\\d+)/)\r\n    if (match) {\r\n      return `Claude Sonnet ${match[1]}.${match[2]}`\r\n    }\r\n    return 'Claude Sonnet'\r\n  }\r\n\r\n  if (modelId.includes('opus')) {\r\n    const match = modelId.match(/claude-opus-(\\d+)/)\r\n    if (match) {\r\n      return `Claude Opus ${match[1]}`\r\n    }\r\n    return 'Claude Opus'\r\n  }\r\n\r\n  if (modelId.includes('haiku')) {\r\n    const match = modelId.match(/claude-(\\d+)-(\\d+)-haiku/)\r\n    if (match) {\r\n      return `Claude ${match[1]}.${match[2]} Haiku`\r\n    }\r\n    return 'Claude Haiku'\r\n  }\r\n\r\n  // Fallback: capitalize and format\r\n  return modelId\r\n    .split('-')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ')\r\n}\r\n\r\n// Helper function to determine model type\r\nfunction getModelType(modelId) {\r\n  if (modelId.includes('sonnet')) return 'balanced'\r\n  if (modelId.includes('opus')) return 'powerful'\r\n  if (modelId.includes('haiku')) return 'fast'\r\n  return 'standard'\r\n}\r\n\r\n// Helper function to get model description\r\nfunction getModelDescription(modelId) {\r\n  if (modelId.includes('sonnet-4-5')) {\r\n    return 'Neueste Sonnet-Version mit verbesserter Genauigkeit und Geschwindigkeit'\r\n  }\r\n  if (modelId.includes('sonnet-4')) {\r\n    return 'Ausgewogenes Modell f\u00FCr komplexe Aufgaben'\r\n  }\r\n  if (modelId.includes('sonnet')) {\r\n    return 'Ausgewogen zwischen Leistung und Geschwindigkeit'\r\n  }\r\n  if (modelId.includes('opus')) {\r\n    return 'H\u00F6chste Genauigkeit und Intelligenz'\r\n  }\r\n  if (modelId.includes('haiku')) {\r\n    return 'Schnell und effizient f\u00FCr einfache Aufgaben'\r\n  }\r\n  return 'Claude Modell'\r\n}\r\n\r\nexport async function onRequestGet(context) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      endpoint: '/api/get-models',\r\n      method: 'POST',\r\n      description: 'Fetches available Claude models',\r\n      requiredFields: ['apiKey']\r\n    }),\r\n    { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n  )\r\n}\r\n", "// Cloudflare Pages Function: AUTO Mode Assessment Update\r\n// Updates AUTO mode settings based on user performance after each question\r\n\r\nexport async function onRequestPost(context) {\r\n  try {\r\n    const body = await context.request.json()\r\n    const { apiKey, userId, previousAssessment, performanceData } = body\r\n\r\n    // Validate required fields\r\n    if (!apiKey || !performanceData) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Missing required fields'\r\n        }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Build previous assessment context\r\n    const previousAssessmentText = previousAssessment\r\n      ? `VORHERIGE EINSCH\u00C4TZUNG:\r\n- Detailgrad: ${previousAssessment.currentAssessment.detailLevel}%\r\n- Temperatur: ${previousAssessment.currentAssessment.temperature}\r\n- Hilfestellung: ${previousAssessment.currentAssessment.helpfulness}%\r\n- Begr\u00FCndung: \"${previousAssessment.currentAssessment.reasoning}\"`\r\n      : 'ERSTE EINSCH\u00C4TZUNG (keine vorherige Einsch\u00E4tzung vorhanden)'\r\n\r\n    // Build struggling topics text\r\n    const strugglingTopicsText = performanceData.strugglingTopics?.length > 0\r\n      ? `Schwierige Themen: ${performanceData.strugglingTopics.join(', ')}`\r\n      : 'Keine spezifischen Schwierigkeiten erkannt'\r\n\r\n    const prompt = `Du bist ein KI-Lernsystem, das die optimalen Lerneinstellungen f\u00FCr einen Sch\u00FCler bestimmt.\r\n\r\n${previousAssessmentText}\r\n\r\nAKTUELLE PERFORMANCE (letzte ${performanceData.last10Questions?.length || 10} Aufgaben):\r\n- Erfolgsrate: ${Math.round(performanceData.avgAccuracy)}%\r\n- Durchschnittliche Hinweise pro Aufgabe: ${performanceData.avgHintsUsed.toFixed(1)}\r\n- Durchschnittliche Zeit pro Aufgabe: ${Math.round(performanceData.avgTimeSpent)}s\r\n- ${strugglingTopicsText}\r\n\r\nDEINE AUFGABE:\r\nPasse die Lernparameter an, um dem Sch\u00FCler optimal zu helfen:\r\n\r\nPARAMETER:\r\n1. **detailLevel** (0-100): Wie ausf\u00FChrlich sollen Erkl\u00E4rungen und Hinweise sein?\r\n   - 0-30: Sehr kurz, nur Stichpunkte\r\n   - 31-60: Ausgeglichen, klare Erkl\u00E4rungen\r\n   - 61-100: Sehr ausf\u00FChrlich, Schritt-f\u00FCr-Schritt\r\n\r\n2. **temperature** (0-1, Schritte von 0.1): Wie kreativ vs. pr\u00E4zise sollen Hinweise sein?\r\n   - 0.0-0.3: Sehr pr\u00E4zise, mathematisch streng\r\n   - 0.4-0.6: Ausgeglichen\r\n   - 0.7-1.0: Kreativ, verschiedene Erkl\u00E4rungsans\u00E4tze\r\n\r\n3. **helpfulness** (0-100): Wie viel Unterst\u00FCtzung braucht der Sch\u00FCler?\r\n   - 0-30: Eigenst\u00E4ndig, minimale Hilfe\r\n   - 31-60: Ausgeglichen\r\n   - 61-100: Sehr unterst\u00FCtzend, viele Hilfestellungen\r\n\r\nANPASSUNGS-LOGIK (Beispiele):\r\n- Hohe Erfolgsrate (>80%) + wenige Hinweise (< 1.5) \u2192 Weniger Hilfe, fordere Eigenst\u00E4ndigkeit\r\n- Niedrige Erfolgsrate (<50%) \u2192 Mehr Details, mehr Unterst\u00FCtzung, pr\u00E4zisere Hinweise\r\n- Viele Hinweise genutzt (> 2) \u2192 Erh\u00F6he helpfulness und detailLevel\r\n- Spezifische Themenschwierigkeiten \u2192 temperature senken f\u00FCr pr\u00E4zisere Erkl\u00E4rungen\r\n- Gute Performance trotz wenig Hilfe \u2192 Fortgeschrittene Herausforderungen\r\n\r\nAUSGABE:\r\nGib deine Einsch\u00E4tzung als JSON zur\u00FCck (NUR das JSON):\r\n{\r\n  \"detailLevel\": 65,\r\n  \"temperature\": 0.5,\r\n  \"helpfulness\": 70,\r\n  \"reasoning\": \"Sch\u00FCler zeigt Fortschritt, aber braucht noch Unterst\u00FCtzung bei komplexen Ableitungen. Detailgrad erh\u00F6ht, um Sicherheit zu st\u00E4rken.\"\r\n}\r\n\r\nWICHTIG:\r\n- Die \"reasoning\" Begr\u00FCndung ist NICHT f\u00FCr den Sch\u00FCler sichtbar, nur intern\r\n- Maximal 2 S\u00E4tze f\u00FCr reasoning\r\n- Sei objektiv und datenbasiert`\r\n\r\n    // Call Claude API\r\n    const anthropicResponse = await fetch('https://api.anthropic.com/v1/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'claude-sonnet-4-20250514',\r\n        max_tokens: 500,\r\n        temperature: 0.3,\r\n        messages: [\r\n          {\r\n            role: 'user',\r\n            content: prompt\r\n          }\r\n        ]\r\n      })\r\n    })\r\n\r\n    if (!anthropicResponse.ok) {\r\n      const error = await anthropicResponse.json()\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Anthropic API error',\r\n          details: error\r\n        }),\r\n        { status: anthropicResponse.status, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    const anthropicData = await anthropicResponse.json()\r\n    const responseText = anthropicData.content[0].text\r\n\r\n    // Parse JSON response\r\n    let newAssessment\r\n    try {\r\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/)\r\n      if (jsonMatch) {\r\n        newAssessment = JSON.parse(jsonMatch[0])\r\n      } else {\r\n        newAssessment = JSON.parse(responseText)\r\n      }\r\n    } catch (parseError) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Failed to parse Claude response',\r\n          rawResponse: responseText\r\n        }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      )\r\n    }\r\n\r\n    // Validate ranges\r\n    newAssessment.detailLevel = Math.max(0, Math.min(100, newAssessment.detailLevel))\r\n    newAssessment.temperature = Math.max(0, Math.min(1, Math.round(newAssessment.temperature * 10) / 10))\r\n    newAssessment.helpfulness = Math.max(0, Math.min(100, newAssessment.helpfulness))\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        newAssessment\r\n      }),\r\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('Error in update-auto-mode:', error)\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Server error',\r\n        message: error.message\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function onRequestGet(context) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      endpoint: '/api/update-auto-mode',\r\n      method: 'POST',\r\n      description: 'Updates AUTO mode assessment based on performance',\r\n      requiredFields: ['apiKey', 'performanceData']\r\n    }),\r\n    { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n  )\r\n}\r\n", "import { onRequestGet as __api_analyze_image_js_onRequestGet } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\analyze-image.js\"\nimport { onRequestPost as __api_analyze_image_js_onRequestPost } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\analyze-image.js\"\nimport { onRequestGet as __api_auth_js_onRequestGet } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\auth.js\"\nimport { onRequestPost as __api_auth_js_onRequestPost } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\auth.js\"\nimport { onRequestGet as __api_evaluate_answer_js_onRequestGet } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\evaluate-answer.js\"\nimport { onRequestPost as __api_evaluate_answer_js_onRequestPost } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\evaluate-answer.js\"\nimport { onRequestGet as __api_generate_custom_hint_js_onRequestGet } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\generate-custom-hint.js\"\nimport { onRequestPost as __api_generate_custom_hint_js_onRequestPost } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\generate-custom-hint.js\"\nimport { onRequestGet as __api_generate_questions_js_onRequestGet } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\generate-questions.js\"\nimport { onRequestPost as __api_generate_questions_js_onRequestPost } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\generate-questions.js\"\nimport { onRequestGet as __api_get_models_js_onRequestGet } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\get-models.js\"\nimport { onRequestPost as __api_get_models_js_onRequestPost } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\get-models.js\"\nimport { onRequestGet as __api_update_auto_mode_js_onRequestGet } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\update-auto-mode.js\"\nimport { onRequestPost as __api_update_auto_mode_js_onRequestPost } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\functions\\\\api\\\\update-auto-mode.js\"\n\nexport const routes = [\n    {\n      routePath: \"/api/analyze-image\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_analyze_image_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/analyze-image\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_analyze_image_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/auth\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/evaluate-answer\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_evaluate_answer_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/evaluate-answer\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_evaluate_answer_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/generate-custom-hint\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_generate_custom_hint_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/generate-custom-hint\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_generate_custom_hint_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/generate-questions\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_generate_questions_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/generate-questions\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_generate_questions_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/get-models\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_get_models_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/get-models\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_get_models_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/update-auto-mode\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_update_auto_mode_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/update-auto-mode\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_update_auto_mode_js_onRequestPost],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\.wrangler\\\\tmp\\\\bundle-oOSkqZ\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\.wrangler\\\\tmp\\\\bundle-oOSkqZ\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\marco\\\\dev\\\\Seminarkurs\\\\seminarkurs-lernapp-oberstufe-mathe\\\\.wrangler\\\\tmp\\\\bundle-oOSkqZ\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["onRequestPost", "onRequestGet", "onRequestPost", "onRequestGet", "onRequestPost", "onRequestGet", "onRequestPost", "onRequestGet", "onRequestPost", "match", "onRequestGet", "onRequestPost", "onRequestGet", "onRequestGet", "onRequestPost", "value", "_a", "result", "char", "prefix", "i"]
}
